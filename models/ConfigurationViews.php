<?php

namespace app\models;

use function PHPSTORM_META\type;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\UploadedFile;
use yii\helpers\Json;

/**
 * This is the model class for table "configuration_views".
 *
 * @property int $id
 * @property string $name
 * @property int $view_type
 * @property int $layout_type
 * @property string $block_content_1
 * @property string $block_title_1
 * @property string $services
 *
 * @property Monitor[] $monitors
 * @property Terminal[] $terminals
 */
class ConfigurationViews extends BaseModel
{

    const FILE_MAX_COUNT = 3;
    public $imageCount=0;
    public $images;
    public $imageList = [];

    const TYPE_MONITOR = 1;
    const TYPE_TERMINAL = 2;

    const LAYOUT_L1 = 1;
    const LAYOUT_L2 = 2;
    const LAYOUT_L3 = 3;
    const LAYOUT_L4 = 4;
    const LAYOUT_L5 = 5;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'configuration_views';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['view_type','name'], 'required'],
            [['view_type', 'layout_type'], 'integer'],
            [['block_content_1', 'block_title_1','services'], 'string'],
            [['name'], 'string', 'max' => 255],
            [['images'], 'file', 'skipOnEmpty' => true, 'extensions' => 'jpg, png, jpeg','maxFiles' => $this->filesMaxCount],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Անվանում',
            'view_type' => 'Էկրանի տիպ',
            'layout_type' => 'Էկրանի տեսք',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMonitors()
    {
        return $this->hasMany(Monitor::className(), ['configuration_view_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTerminals()
    {
        return $this->hasMany(Terminal::className(), ['configuration_view_id' => 'id']);
    }
    public static function getTypes($index=null){
        $types=[
            self::TYPE_MONITOR => 'Մոնիտոր',
            self::TYPE_TERMINAL => 'Տերմինալ',
        ];
        if(!is_null($index)){
            return ArrayHelper::getValue($types,$index);
        }
        return $types;
    }
    public static function getLayouts($index=null){
        $types=[
            self::LAYOUT_L1 => 'Տեսք 1',
            self::LAYOUT_L2 => 'Տեսք 2',
            self::LAYOUT_L3 => 'Տեսք 3',
            self::LAYOUT_L4 => 'Տեսք 4',
            self::LAYOUT_L5 => 'Տեսք 5',
        ];
        if(!is_null($index)){
            return ArrayHelper::getValue($types,$index);
        }
        return $types;
    }
    public function getFilesMaxCount(){

        return self::FILE_MAX_COUNT-$this->imageCount;
    }
    public function uploadFiles(){
        $this->images = UploadedFile::getInstances($this, 'images');
        foreach ($this->images as $file) {

            $model = new ConfigurationViewImage();
            $model->configuration_view_id = $this->id;
            $model->name = $file->baseName. '.' . $file->extension;
            $path = 'uploads/' . $file->baseName .'_'.time(). '.' . $file->extension;
            if($file->saveAs($path)){
                $model->url = '/'.$path;
                $model->save();
            };
        }
    }
    public function afterSave($insert, $changedAttributes)
    {
        $ids=$type=null;
        if($this->view_type == self::TYPE_MONITOR){
            $ids = Monitor::find()->select('id')->where(['configuration_view_id'=>$this->id])->column();
            $type = Commands::TYPE_MONITOR;
        }
        if($this->view_type == self::TYPE_TERMINAL){
            $ids = Terminal::find()->select('id')->where(['configuration_view_id'=>$this->id])->column();
            $type = Commands::TYPE_TERMINAL;
        }
        if($ids && $type){
            Commands::addCommand([
                'command_name'=>'getConfig',
                'id'=>$ids,
                'type'=>$type,
                'is_group'=>1
            ]);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
    public function beforeSave($insert)
    {
        if($this->view_type==self::TYPE_TERMINAL && $this->services){
            $selected_services = Json::decode($this->services);
            $this->services = trim(implode(',',array_values($selected_services)),',');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->imageList = ConfigurationViewImage::find()->where(['configuration_view_id'=>$this->id])->asArray()->all();
        $this->imageCount = count($this->imageList);
        if($this->view_type==self::TYPE_TERMINAL){
            $selected_services = explode(',',$this->services);
            $this->services = Json::encode(array_combine($selected_services,$selected_services));
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

}
