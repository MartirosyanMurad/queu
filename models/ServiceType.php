<?php

namespace app\models;

use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "service_type".
 *
 * @property int $id
 * @property string $name
 * @property int $parent_id
 * @property string $one_queu_time
 * @property string $queu_start_time
 * @property string $queu_end_time
 * @property int $group_id
 * @property string $service_letter
 * @property int $active_passive
 *
 * @property ServiceType $parent
 * @property ServiceType[] $serviceTypes
 * @property Groups $group
 * @property ServiceTypeImage[] $serviceTypeImages
 * @property ServiceUsers[] $serviceUsers
 */
class ServiceType extends BaseModel
{

    const FILE_MAX_COUNT = 3;
    const ALL_USERS_SERVICE_ID = 21;
    const ALL_USERS_SERVICE_LETTER = 'N';

    const ACTIVE = 1;
    const PASSIVE = 0;
    static $aktive_pasive=[
        self::ACTIVE=>'Ակտիվ',
        self::PASSIVE=>'Պասիվ',
    ];
    public $users=[];
    public $imageCount=0;
    /**
     * @var UploadedFile[]
     */
    public $images;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'service_type';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['parent_id', 'group_id', 'active_passive','order'], 'integer'],
            [['one_queu_time'], 'number'],
            [['queu_start_time', 'queu_end_time','users'], 'safe'],
            [['images'], 'file', 'skipOnEmpty' => true, 'extensions' => 'jpg, png, jpeg','maxFiles' => $this->filesMaxCount],
            [['name', 'service_letter'], 'string', 'max' => 255],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => ServiceType::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['group_id'], 'exist', 'skipOnError' => true, 'targetClass' => Groups::className(), 'targetAttribute' => ['group_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Անվանում'),
            'parent_id' => Yii::t('app', 'Գլխավոր'),
            'one_queu_time' => Yii::t('app', 'Մեկ հերթի ժամանակ'),
            'queu_start_time' => Yii::t('app', 'Հերթի սպասարկման սկիզբ'),
            'queu_end_time' => Yii::t('app', 'Հերթի սպասարկման ավարտ'),
            'group_id' => Yii::t('app', 'Խումբ'),
            'service_letter' => Yii::t('app', 'Ծառայության տառը'),
            'active_passive' => Yii::t('app', 'Ակտիվ/Պասիվ'),
            'users' => Yii::t('app', 'Օգտվողներ'),
            'order' => Yii::t('app', 'Դիրքը'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(ServiceType::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getServiceTypes()
    {
        return $this->hasMany(ServiceType::className(), ['parent_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroup()
    {
        return $this->hasOne(Groups::className(), ['id' => 'group_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getServiceTypeImages()
    {
        return $this->hasMany(ServiceTypeImage::className(), ['service_type_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getServiceUsers()
    {
        return $this->hasMany(ServiceUsers::className(), ['service_type_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->saveUsers();
//        $this->uploadFiles();

        parent::afterSave($insert, $changedAttributes);
    }
    public function afterFind()
    {
        $sql = 'SELECT user_id FROM service_users WHERE service_type_id=:service_type_id';
        $this->users = Yii::$app->db->createCommand($sql,['service_type_id'=>$this->id])->queryColumn();
        $this->imageCount = ServiceTypeImage::find()->where(['service_type_id'=>$this->id])->count();
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
    public function saveUsers(){
        ServiceUsers::deleteAll(['service_type_id'=>$this->id]);
        if(!empty($this->users))
        {
            foreach ($this->users as $user){
                $model = new ServiceUsers([
                    'user_id'=>$user,
                    'service_type_id'=>$this->id
                ]);
                $model->save();
            }
        }
    }
    public function uploadFiles(){
        $this->images = UploadedFile::getInstances($this, 'images');
        foreach ($this->images as $file) {

            $model = new ServiceTypeImage();
            $model->service_type_id = $this->id;
            $model->name = $file->baseName. '.' . $file->extension;
            $path = 'uploads/' . $file->baseName .'_'.time(). '.' . $file->extension;
            if($file->saveAs($path)){
                $model->url = '/'.$path;
                $model->save();
            };
        }
    }
    public function getFilesMaxCount(){

        return self::FILE_MAX_COUNT-$this->imageCount;
    }
    public static function getFirstChars(){
        $sql = 'SELECT DISTINCT LEFT(NAME, 1) first_char FROM service_type WHERE parent_id=:parent_id ORDER BY first_char';
        return Yii::$app->db->createCommand($sql,['parent_id'=>self::ALL_USERS_SERVICE_ID])->queryColumn();
    }

}
